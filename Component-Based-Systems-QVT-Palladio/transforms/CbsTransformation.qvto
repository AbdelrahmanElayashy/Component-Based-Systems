modeltype CBS uses 'platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore';
modeltype PCM uses 'platform:/resource/Palladio-Core-PCM/bundles/org.palladiosimulator.pcm/model/pcm.ecore';

	
transformation CBStoPCM(in source:CBS, out target:PCM);

property idCounter: Integer = 1;

main() {
	var repo := source.objectsOfType(CBS::repository::Repository) -> map repository2Repository()->asOrderedSet()->first();
	
	repo.components__Repository += source.objectsOfType(CBS::assembly::Assembly).compositeComponents 
		-> map compositeComponent2compositeComponent(repo);
	
	var env := source.objectsOfType(CBS::environment::Environment)->map environmentToResourceEnvironment()->asOrderedSet()->first();

	var sys := source.objectsOfType(CBS::allocation::System)-> map CBSSystemToPCMSystem()->asOrderedSet()->first();
	
	var allocation := source.objectsOfType(CBS::allocation::Allocation)-> map CBSAllocation2PCMAllocation(env, sys);
}

/////////////////////////////////////////////////
///////////// Allocation ///////////////////////
///////////////////////////////////////////////
mapping CBS::allocation::Allocation::CBSAllocation2PCMAllocation
		(env : PCM::resourceenvironment::ResourceEnvironment,
		 system : PCM::system::System):
		PCM::allocation::Allocation {
	
	id := getId();
	entityName := "Default allocation";
	targetResourceEnvironment_Allocation := env;
	system_Allocation := system;
	allocationContexts_Allocation := self.allocationContexts-> map CBSAllocationContext2PCMAllocationContext(result);
	
}

mapping CBS::allocation::AllocationContext::CBSAllocationContext2PCMAllocationContext
		(allocation : PCM::allocation::Allocation): 
		PCM::allocation::AllocationContext {
	
	id := getId();
	entityName := "AllocationContext " + getId();
	allocation_AllocationContext := allocation;
	resourceContainer_AllocationContext := self.container.resolveone(PCM::resourceenvironment::ResourceContainer);
	assemblyContext_AllocationContext := self.allocates.resolveone(PCM::core::composition::AssemblyContext);
			
}


/////////////////////////////////////////////////
///////////// System ///////////////////////////
///////////////////////////////////////////////
mapping CBS::allocation::System::CBSSystemToPCMSystem():
	PCM::system::System {
		
	id := getId();
	entityName := self.name;
	assemblyContexts__ComposedStructure := self.childContexts-> map CBSAssemblyContextToPCMAssemblyContext(result);

}

/////////////////////////////////////////////////
///////////// Assembly /////////////////////////
///////////////////////////////////////////////

abstract mapping CBS::assembly::ComposedSystem::composedSystem2composedStructure(): PCM::core::composition::ComposedStructure {
	id := getId();
	entityName := "Default (to be overwritten)";
	assemblyContexts__ComposedStructure := self.childContexts -> map CBSAssemblyContextToPCMAssemblyContext(result);
	
	connectors__ComposedStructure := Set{};
	connectors__ComposedStructure += self.providedDelegationConnectors -> map CBSProvidedDelgToPCMProvidedDelg(result);
	connectors__ComposedStructure += self.requiredDelegationConnectors -> map CBSRequiredDelgToPCMRequiredDelg(result);
	connectors__ComposedStructure += self.assemblyConnectors -> map assemblyConnector2assemblyConnector(result);
	
	resourceRequiredDelegationConnectors_ComposedStructure; // TODO: check meaning
	eventChannel__ComposedStructure; // TODO: check meaning
}

// TODO: reuse parts for component/system
mapping CBS::assembly::CompositeComponent::compositeComponent2compositeComponent(repo: PCM::repository::Repository): 
	PCM::repository::CompositeComponent {
	id := getId();
	entityName := self.name;
	assemblyContexts__ComposedStructure := self.childContexts -> map CBSAssemblyContextToPCMAssemblyContext(result);
	
	connectors__ComposedStructure := Set{};
	connectors__ComposedStructure += self.providedDelegationConnectors -> map CBSProvidedDelgToPCMProvidedDelg(result);
	connectors__ComposedStructure += self.requiredDelegationConnectors -> map CBSRequiredDelgToPCMRequiredDelg(result);
	connectors__ComposedStructure += self.assemblyConnectors -> map assemblyConnector2assemblyConnector(result);
	
	resourceRequiredDelegationConnectors_ComposedStructure := Set{}; // TODO: check meaning
	eventChannel__ComposedStructure := Set{}; // TODO: check meaning
	
	providedRoles_InterfaceProvidingEntity := 
		self.childContexts.providedRoles -> forEach(role) {role -> map providedRole2providedRole(); };
	requiredRoles_InterfaceRequiringEntity :=
		self.childContexts.requiredRoles -> forEach(role) {role -> map requiredRole2requiredRole(); };
	
	repository__RepositoryComponent := repo;
	
	parentCompleteComponentTypes := Set{}; // note: no concept of component inheritance in CBS
	componentParameterUsage_ImplementationComponentType := Set{}; // note: no parameterization in CBS
	componentType := PCM::repository::ComponentType::BUSINESS_COMPONENT; // note: default mapping - no related concept in CBS
	
	resourceRequiredRoles__ResourceInterfaceRequiringEntity := Set{}; // note: no concept of resources (TODO: verify)
}

mapping CBS::assembly::ProvidedRole::providedRole2providedRole(): PCM::repository::OperationProvidedRole {
	id := getId();
	entityName := self.name;
	providedInterface__OperationProvidedRole := self.interface.resolveone(PCM::repository::OperationInterface);
	providingEntity_ProvidedRole := self.assemblyContext.instantiates.resolveone(PCM::repository::RepositoryComponent);
}

mapping CBS::assembly::RequiredRole::requiredRole2requiredRole(): PCM::repository::OperationRequiredRole {
	id := getId();
	entityName := self.name;
	requiredInterface__OperationRequiredRole := self.interface.resolveone(PCM::repository::OperationInterface);
	requiringEntity_RequiredRole := self.assemblyContext.instantiates.resolveone(PCM::repository::RepositoryComponent);
}

mapping CBS::assembly::AssemblyContext::CBSAssemblyContextToPCMAssemblyContext(parentStructure: PCM::core::composition::ComposedStructure):
	PCM::core::composition::AssemblyContext {
	id := getId();
	entityName := self.name;
	
	parentStructure__AssemblyContext := parentStructure;
	encapsulatedComponent__AssemblyContext := self.instantiates.resolveone(PCM::repository::RepositoryComponent);
	configParameterUsages__AssemblyContext := Set{}; // TODO: check meaning
} 

mapping CBS::assembly::ProvidedDelegationConnector::CBSProvidedDelgToPCMProvidedDelg(parentStructure: PCM::core::composition::ComposedStructure):
	PCM::core::composition::ProvidedDelegationConnector {
	id := getId();
	entityName := self.name;
	
	assemblyContext_ProvidedDelegationConnector := self.providingRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	
	parentStructure__Connector := parentStructure;
	innerProvidedRole_ProvidedDelegationConnector := self.providingRole.resolveone(PCM::repository::OperationProvidedRole);
	outerProvidedRole_ProvidedDelegationConnector; // TODO: check meaning
}

mapping CBS::assembly::RequiredDelegationConnector::CBSRequiredDelgToPCMRequiredDelg(parentStructure: PCM::core::composition::ComposedStructure):
	PCM::core::composition::RequiredDelegationConnector {
	id := getId();
	entityName := self.name;
	
	assemblyContext_RequiredDelegationConnector := self.requiringRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	
	parentStructure__Connector := parentStructure;
	innerRequiredRole_RequiredDelegationConnector := self.requiringRole.resolveone(PCM::repository::OperationRequiredRole);
	outerRequiredRole_RequiredDelegationConnector; // TODO: check meaning
}

mapping CBS::assembly::AssemblyConnector::assemblyConnector2assemblyConnector(parentStructure: PCM::core::composition::ComposedStructure): 
	PCM::core::composition::AssemblyConnector {
	id := getId();
	entityName := self.name;
	parentStructure__Connector := parentStructure;
	requiringAssemblyContext_AssemblyConnector:= self.requiringRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	providingAssemblyContext_AssemblyConnector:= self.providingRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	
	requiredRole_AssemblyConnector := self.requiringRole.resolveone(PCM::repository::OperationRequiredRole);
	providedRole_AssemblyConnector := self.providingRole.resolveone(PCM::repository::OperationProvidedRole);
}

/////////////////////////////////////////////////
///////////// Repository ///////////////////////
///////////////////////////////////////////////

mapping CBS::repository::Repository::repository2Repository() : PCM::repository::Repository {
	id := getId();
	entityName := "Default Repository";
	repositoryDescription := "Default Repository";
	dataTypes__Repository := self.types -> map type2dataType(result);
	interfaces__Repository := self.interfaces -> map interface2OperationInterface(result);
	components__Repository := self.components -> map atomicComponenet2basicComponent(result);
	failureTypes__Repository := Set {}; // note: no failures modeled in CBS
}

mapping CBS::repository::AtomicComponent::atomicComponenet2basicComponent(repo: PCM::repository::Repository): PCM::repository::BasicComponent {
	id := getId();
	entityName := self.name;
	repository__RepositoryComponent := repo;
	
	providedRoles_InterfaceProvidingEntity := 
		self.provides -> 
		collect(i | i.resolveone(PCM::repository::OperationInterface)) -> 
		forEach(interface) { new PCM::repository::OperationProvidedRole(self, result, interface) };
	requiredRoles_InterfaceRequiringEntity := 
		self.requires -> 
		collect(i | i.resolveone(PCM::repository::OperationInterface)) -> 
		forEach(interface) { new PCM::repository::OperationRequiredRole(self, result, interface) };
	
	resourceRequiredRoles__ResourceInterfaceRequiringEntity := Set{}; // note: no concept of resources (TODO: verify)
	passiveResource_BasicComponent := Set{}; // note: no concept of semaphores, e.g. in CBS
	
	parentCompleteComponentTypes := Set{}; // note: no concept of component inheritance in CBS
	componentParameterUsage_ImplementationComponentType := Set{}; // note: no parameterization in CBS
	componentType := PCM::repository::ComponentType::BUSINESS_COMPONENT; // note: default mapping - no related concept in CBS
	
	serviceEffectSpecifications__BasicComponent := null; // TODO: implement after behavioral description is completed
}

constructor PCM::repository::OperationProvidedRole::OperationProvidedRole(
	originalComponent: CBS::repository::AtomicComponent,
	newComponent: PCM::repository::BasicComponent,
	interface: PCM::repository::OperationInterface
	) {
	id := getId();
	entityName := originalComponent.name + ".provides:" + interface.entityName;
	providingEntity_ProvidedRole := newComponent;
	providedInterface__OperationProvidedRole := interface;
};

constructor PCM::repository::OperationRequiredRole::OperationRequiredRole(
	originalComponent: CBS::repository::AtomicComponent,
	newComponent: PCM::repository::BasicComponent,
	interface: PCM::repository::OperationInterface
	) {
	id := getId();
	entityName := originalComponent.name + ".provides:" + interface.entityName;
	requiringEntity_RequiredRole := newComponent;
	requiredInterface__OperationRequiredRole := interface;
};

mapping CBS::repository::Interface::interface2OperationInterface(repo: PCM::repository::Repository): PCM::repository::OperationInterface {
	id := getId();
	entityName := self.name;
	repository__Interface := repo;
	
	signatures__OperationInterface := self.signatures -> map signature2operationSignature(result);
	
	parentInterfaces__Interface := Set {}; // note: no inheritance of interfaces in CBS 
	protocols__Interface := Set {}; // note: no information about order of calls modeled in CBS
	requiredCharacterisations := Set {}; // note: no variable characterization modeled in CBS
}

mapping CBS::repository::Signature::signature2operationSignature(interface: PCM::repository::OperationInterface): PCM::repository::OperationSignature {
	id := getId();
	entityName := self.name;
	interface__OperationSignature := interface;
	
	parameters__OperationSignature := self.parameters -> map parameter2parameter(result);
	if(self.returnType.oclIsKindOf(CBS::repository::types::Void)){
		// TODO: is null correct to model "not set"?
		returnType__OperationSignature := null; // note: void not modeled in PCM
	} else {
		returnType__OperationSignature := self.returnType.resolveone(PCM::repository::DataType);
	};
	
	exceptions__Signature := Set {}; // note: no exceptions modeled in CBS
	failureType := Set{}; // note: no failures modeled in CBS
}

mapping CBS::repository::Parameter::parameter2parameter(operation: PCM::repository::OperationSignature): PCM::repository::Parameter {
	parameterName := self.name;
	operationSignature__Parameter := operation;
	
	dataType__Parameter := self.type.resolveone(PCM::repository::DataType);
	
	infrastructureSignature__Parameter; // TODO: check meaning
	eventType__Parameter; // TODO: check meaning
	resourceSignature__Parameter; // TODO: check meaning
	modifier__Parameter := PCM::repository::ParameterModifier::none;
}

// TODO: behavioral description

/////////////////////////////////////////////////
///////////// Environment //////////////////////
///////////////////////////////////////////////
mapping CBS::environment::Environment::environmentToResourceEnvironment():
	PCM::resourceenvironment::ResourceEnvironment {
	
	entityName := self.name;
	resourceContainer_ResourceEnvironment += self.container->forEach(container) 
	{ container->map containerToResourceContainer(result);};
	linkingResources__ResourceEnvironment += self.linker->forEach(link) 
	{ link->map linkerToLinkingResource(result);}
}

mapping CBS::environment::Linker::linkerToLinkingResource
(env : PCM::resourceenvironment::ResourceEnvironment):
	PCM::resourceenvironment::LinkingResource {
		
	log('Converting Linker : ' + self.name);
	id := getId();
	entityName := self.name;
	resourceEnvironment_LinkingResource := env;
	
	connectedResourceContainers_LinkingResource := Set{};
	self.links -> forEach(c) {
		log('resolve', c.resolveone(PCM::resourceenvironment::ResourceContainer));
		connectedResourceContainers_LinkingResource += c.resolveone(PCM::resourceenvironment::ResourceContainer)
	};
	communicationLinkResourceSpecifications_LinkingResource := null; // TODO
	log('########## End Converting ##########');
}


mapping CBS::environment::Container::containerToResourceContainer
(env : PCM::resourceenvironment::ResourceEnvironment):
	PCM::resourceenvironment::ResourceContainer {
	log('Converting Container : ' + self.name);
	id := getId();
	entityName := self.name;
	resourceEnvironment_ResourceContainer := env;
	parentResourceContainer__ResourceContainer := result;
	activeResourceSpecifications_ResourceContainer := null; // TODO
	nestedResourceContainers__ResourceContainer := null; // TODO
	hddResourceSpecifications := null; // TODO
	log('########## End Converting ##########');	
}

/////////////////////////////////////////////////
///////////// Types ////////////////////////////
///////////////////////////////////////////////
abstract mapping CBS::repository::types::Type::type2dataTypeAbstract(repo: PCM::repository::Repository) : PCM::repository::DataType 
{}

mapping CBS::repository::types::Type::type2dataType (repo: PCM::repository::Repository) : PCM::repository::DataType
disjuncts
	CBS::repository::types::SimpleType::simpleType2primitiveDataType,
	CBS::repository::types::CollectionType::collectionType2collectionDataType,
	CBS::repository::types::ComplexType::complexType2compositeDataType
{}

mapping CBS::repository::types::SimpleType::simpleType2primitiveDataType(repo: PCM::repository::Repository) : PCM::repository::PrimitiveDataType inherits CBS::repository::types::Type::type2dataTypeAbstract
when { self.oclIsKindOf(CBS::repository::types::SimpleType) }
{
	var simpleTypeInstance = self.oclAsType(CBS::repository::types::SimpleType);
	repository__DataType := repo;
	switch{
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::String) {
			type := PCM::repository::PrimitiveTypeEnum::STRING;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Int) {
			type := PCM::repository::PrimitiveTypeEnum::INT;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Boolean) {
			type := PCM::repository::PrimitiveTypeEnum::BOOL;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Char) {
			type := PCM::repository::PrimitiveTypeEnum::CHAR;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Date) {
			// note: no direct mapping exists
			type := PCM::repository::PrimitiveTypeEnum::STRING;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Float) {
			// note: no direct mapping exists
			type := PCM::repository::PrimitiveTypeEnum::LONG;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Long) {
			type := PCM::repository::PrimitiveTypeEnum::LONG;
		}
	}
}

mapping CBS::repository::types::CollectionType::collectionType2collectionDataType(repo: PCM::repository::Repository) : PCM::repository::CollectionDataType inherits CBS::repository::types::Type::type2dataTypeAbstract
when { self.oclIsKindOf(CBS::repository::types::CollectionType) }
{
	var collectionTypeInstance = self.oclAsType(CBS::repository::types::CollectionType);
	var innerType := collectionTypeInstance.innerType.resolveone(PCM::repository::DataType);
	
	id := getId();
	repository__DataType := repo;
	entityName := collectionTypeInstance.type.toString() + "<" + collectionTypeInstance.innerType.name + ">";
	innerType_CollectionDataType := innerType;
}

mapping CBS::repository::types::ComplexType::complexType2compositeDataType(repo: PCM::repository::Repository) : PCM::repository::CompositeDataType 
when { self.oclIsKindOf(CBS::repository::types::ComplexType) }
{
	var complexTypeInstance = self.oclAsType(CBS::repository::types::ComplexType);
	
	id := getId();
	repository__DataType := repo;
	entityName := complexTypeInstance.name;
	parentType_CompositeDataType := Set{}; // note: no inheritance of complex types in CBS
	innerDeclaration_CompositeDataType := complexTypeInstance.members -> map complexMember2innerDeclaration(result);
}

mapping CBS::repository::types::ComplexMember::complexMember2innerDeclaration(compositeDataType: PCM::repository::CompositeDataType): PCM::repository::InnerDeclaration {
	compositeDataType_InnerDeclaration := compositeDataType;
	entityName := self.name;
	datatype_InnerDeclaration := self.type.resolveone(PCM::repository::DataType);
}


helper getId(): String {
	var res:= idCounter.toString();
	idCounter := idCounter + 1;
	return res;
}
