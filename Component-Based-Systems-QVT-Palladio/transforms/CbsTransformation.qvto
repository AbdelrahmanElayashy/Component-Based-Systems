modeltype CBS uses 'platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore';
modeltype PCM uses 'platform:/resource/Palladio-Core-PCM/bundles/org.palladiosimulator.pcm/model/pcm.ecore';
modeltype STOEX uses 'platform:/resource/de.uka.ipd.sdq.stoex/bin/stoex.ecore';

modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';


transformation CBStoPCM(in source:CBS, out target:PCM);

property idCounter: Integer = 1;
property defaultResourceRepository: PCM::resourcetype::ResourceRepository = null;
property defaultCommunicationResourceType : PCM::resourcetype::CommunicationLinkResourceType = null;
	

main() {
	var repo := source.objectsOfType(CBS::repository::Repository) -> map repository2Repository()->asOrderedSet()->first();
	
	defaultResourceRepository := new PCM::resourcetype::ResourceRepository();
	defaultCommunicationResourceType := new PCM::resourcetype::CommunicationLinkResourceType(defaultResourceRepository);
	defaultResourceRepository.availableResourceTypes_ResourceRepository -> including(defaultCommunicationResourceType);
	
	
	var env := source.objectsOfType(CBS::environment::Environment)->map environmentToResourceEnvironment(repo)->asOrderedSet()->first();

	var sys := source.objectsOfType(CBS::allocation::System)-> map CBSSystemToPCMSystem()->asOrderedSet()->first();
	
	var allocation := source.objectsOfType(CBS::allocation::Allocation)-> map CBSAllocation2PCMAllocation(env, sys);
}

/////////////////////////////////////////////////
///////////// Allocation ///////////////////////
///////////////////////////////////////////////
mapping CBS::allocation::Allocation::CBSAllocation2PCMAllocation
		(env : PCM::resourceenvironment::ResourceEnvironment,
		 system : PCM::system::System):
		PCM::allocation::Allocation {
	
	id := getId();
	entityName := "System " + system.entityName;
	targetResourceEnvironment_Allocation := env;
	system_Allocation := system;
	allocationContexts_Allocation := self.allocationContexts-> map CBSAllocationContext2PCMAllocationContext(result);
	
}

mapping CBS::allocation::AllocationContext::CBSAllocationContext2PCMAllocationContext
		(allocation : PCM::allocation::Allocation): 
		PCM::allocation::AllocationContext {
	
	id := getId();
	allocation_AllocationContext := allocation;
	resourceContainer_AllocationContext := self.container.resolveone(PCM::resourceenvironment::ResourceContainer);
	assemblyContext_AllocationContext := self.allocates.resolveone(PCM::core::composition::AssemblyContext);
	entityName := "Allocation " + assemblyContext_AllocationContext.entityName;
			
}


/////////////////////////////////////////////////
///////////// System ///////////////////////////
///////////////////////////////////////////////

// TODO: reuse code from other mappings
// problem: CBS System does not provide/require interfaces
mapping CBS::allocation::System::CBSSystemToPCMSystem(): PCM::system::System {
	id := getId();
	entityName := self.name;
	
	assemblyContexts__ComposedStructure := self.childContexts -> map CBSAssemblyContextToPCMAssemblyContext(result);
	
	self.providedDelegationConnectors.providingRole.interface;
	
	providedRoles_InterfaceProvidingEntity := 
		self.providedDelegationConnectors.providingRole.interface ->
		collect(i | i.resolveone(PCM::repository::OperationInterface)) -> 
		collect(interface | new PCM::repository::OperationProvidedRole(self.name, result, interface));
	requiredRoles_InterfaceRequiringEntity := 
		self.requiredDelegationConnectors.requiringRole.interface ->
		collect(i | i.resolveone(PCM::repository::OperationInterface)) -> 
		collect(interface | new PCM::repository::OperationRequiredRole(self.name, result, interface));
	
	connectors__ComposedStructure := Set{};
	connectors__ComposedStructure += self.providedDelegationConnectors -> map CBSProvidedDelgToPCMProvidedDelg(result);
	connectors__ComposedStructure += self.requiredDelegationConnectors -> map CBSRequiredDelgToPCMRequiredDelg(result);
	connectors__ComposedStructure += self.assemblyConnectors -> map assemblyConnector2assemblyConnector(result);
	
	resourceRequiredDelegationConnectors_ComposedStructure := Set{}; // note: no conept of resources in CBS
	resourceRequiredRoles__ResourceInterfaceRequiringEntity := Set{}; // note: no conept of resources in CBS
	eventChannel__ComposedStructure := Set{}; // no concept of events in CBS
	qosAnnotations_System := Set{};
	
}

/////////////////////////////////////////////////
///////////// Assembly /////////////////////////
///////////////////////////////////////////////

mapping CBS::assembly::CompositeComponent::compositeComponent2compositeComponent(repo: PCM::repository::Repository): PCM::repository::CompositeComponent 
	inherits CBS::repository::Component::component2ImplementationComponentType {
	assemblyContexts__ComposedStructure := self.childContexts -> map CBSAssemblyContextToPCMAssemblyContext(result);
	
	connectors__ComposedStructure := Set{};
	connectors__ComposedStructure += self.providedDelegationConnectors -> map CBSProvidedDelgToPCMProvidedDelg(result);
	connectors__ComposedStructure += self.requiredDelegationConnectors -> map CBSRequiredDelgToPCMRequiredDelg(result);
	connectors__ComposedStructure += self.assemblyConnectors -> map assemblyConnector2assemblyConnector(result);
	
	resourceRequiredDelegationConnectors_ComposedStructure := Set{}; // note: no conept of resources in CBS
	
	eventChannel__ComposedStructure := Set{}; // no concept of events in CBS
}

mapping CBS::assembly::AssemblyContext::CBSAssemblyContextToPCMAssemblyContext(parentStructure: PCM::core::composition::ComposedStructure):
	PCM::core::composition::AssemblyContext {
	id := getId();
	entityName := self.name;
	
	parentStructure__AssemblyContext := parentStructure;
	encapsulatedComponent__AssemblyContext := self.instantiates.resolveone(PCM::repository::RepositoryComponent);
	configParameterUsages__AssemblyContext := Set{}; // note: no parameterization in CBS
}

helper findMatchingRequiredRole(roles: Set(PCM::repository::RequiredRole), interface: PCM::repository:: OperationInterface): PCM::repository::OperationRequiredRole {
	// TODO: check if there is a more safe implementation
	return roles 
		-> selectByKind(PCM::repository::OperationRequiredRole)
		-> select(r | r.requiredInterface__OperationRequiredRole = interface)
		-> asOrderedSet()
		-> first();
}

helper findMatchingProvidedRole(roles: Set(PCM::repository::ProvidedRole), interface: PCM::repository:: OperationInterface): PCM::repository::OperationProvidedRole{
	// TODO: check if there is a more safe implementation
	return roles
	-> selectByKind(PCM::repository::OperationProvidedRole)
	-> select(r | r.providedInterface__OperationProvidedRole = interface)
	-> asOrderedSet()
	-> first();
}

mapping CBS::assembly::ProvidedDelegationConnector::CBSProvidedDelgToPCMProvidedDelg(parentStructure: PCM::core::entity::ComposedProvidingRequiringEntity):
	PCM::core::composition::ProvidedDelegationConnector {
	id := getId();
	entityName := self.name;
	
	parentStructure__Connector := parentStructure;
	assemblyContext_ProvidedDelegationConnector := self.providingRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	
	var interface := self.providingRole.interface.resolveone(PCM::repository::OperationInterface);
	innerProvidedRole_ProvidedDelegationConnector := 
		findMatchingProvidedRole(self.providingRole.assemblyContext.instantiates.resolveone(PCM::repository::RepositoryComponent).providedRoles_InterfaceProvidingEntity, interface);
	outerProvidedRole_ProvidedDelegationConnector := findMatchingProvidedRole(parentStructure.providedRoles_InterfaceProvidingEntity, interface);
}

mapping CBS::assembly::RequiredDelegationConnector::CBSRequiredDelgToPCMRequiredDelg(parentStructure: PCM::core::entity::ComposedProvidingRequiringEntity):
	PCM::core::composition::RequiredDelegationConnector {
	id := getId();
	entityName := self.name;
	
	parentStructure__Connector := parentStructure;
	assemblyContext_RequiredDelegationConnector := self.requiringRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	
	var interface := self.requiringRole.interface.resolveone(PCM::repository::OperationInterface);
	innerRequiredRole_RequiredDelegationConnector := 
		findMatchingRequiredRole(self.requiringRole.assemblyContext.instantiates.resolveone(PCM::repository::RepositoryComponent).requiredRoles_InterfaceRequiringEntity, interface);
	outerRequiredRole_RequiredDelegationConnector := findMatchingRequiredRole(parentStructure.requiredRoles_InterfaceRequiringEntity, interface);
}

mapping CBS::assembly::AssemblyConnector::assemblyConnector2assemblyConnector(parentStructure: PCM::core::composition::ComposedStructure): 
	PCM::core::composition::AssemblyConnector {
	id := getId();
	entityName := self.name;
	parentStructure__Connector := parentStructure;
	
	var requiringAssemblyContext := self.requiringRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	var providingAssemblyContext := self.providingRole.assemblyContext.resolveone(PCM::core::composition::AssemblyContext);
	requiringAssemblyContext_AssemblyConnector := requiringAssemblyContext;
	providingAssemblyContext_AssemblyConnector := providingAssemblyContext;
	
	var interface := self.requiringRole.interface.resolveone(PCM::repository::OperationInterface);
	requiredRole_AssemblyConnector :=
		findMatchingRequiredRole(requiringAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity, interface);
	providedRole_AssemblyConnector := 
		findMatchingProvidedRole(providingAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity, interface);
}

/////////////////////////////////////////////////
///////////// Repository ///////////////////////
///////////////////////////////////////////////

mapping CBS::repository::Repository::repository2Repository() : PCM::repository::Repository {
	id := getId();
	entityName := "Default Repository";
	repositoryDescription := "Default Repository";
	dataTypes__Repository := self.types -> map type2dataType(result);
	interfaces__Repository := self.interfaces -> map interface2OperationInterface(result);
	
	var basicComponents := self.components -> map atomicComponenet2basicComponent(result);
	var compositeComponents := source.objectsOfType(CBS::assembly::Assembly).compositeComponents 
		-> map compositeComponent2compositeComponent(result);
	
	components__Repository := basicComponents -> asBag() -> union(compositeComponents);
	failureTypes__Repository := Set {}; // note: no failures modeled in CBS
}

abstract mapping CBS::repository::Component::component2interfaceProvidingRequieringEntity(repo: PCM::repository::Repository): PCM::core::entity::InterfaceProvidingRequiringEntity {
	id := getId();
	entityName := self.name;
	
	providedRoles_InterfaceProvidingEntity := 
		self.provides -> 
		collect(i | i.resolveone(PCM::repository::OperationInterface)) -> 
		collect(interface | new PCM::repository::OperationProvidedRole(self.name, result, interface));
	requiredRoles_InterfaceRequiringEntity := 
		self.requires -> 
		collect(i | i.resolveone(PCM::repository::OperationInterface)) -> 
		collect(interface | new PCM::repository::OperationRequiredRole(self.name, result, interface));
	
	resourceRequiredRoles__ResourceInterfaceRequiringEntity := Set{}; // note: no concept of resources
}

abstract mapping CBS::repository::Component::component2ImplementationComponentType(repo: PCM::repository::Repository): PCM::repository::ImplementationComponentType 
	inherits CBS::repository::Component::component2interfaceProvidingRequieringEntity {
	repository__RepositoryComponent := repo;
	
	parentCompleteComponentTypes := Set{}; // note: no concept of component inheritance in CBS
	componentParameterUsage_ImplementationComponentType := Set{}; // note: no parameterization in CBS
	componentType := PCM::repository::ComponentType::BUSINESS_COMPONENT; // note: default mapping - no related concept in CBS
}


mapping CBS::repository::AtomicComponent::atomicComponenet2basicComponent(repo: PCM::repository::Repository): PCM::repository::BasicComponent 
	inherits CBS::repository::Component::component2ImplementationComponentType {
	passiveResource_BasicComponent := Set{}; // note: no concept of semaphores, e.g. in CBS
	serviceEffectSpecifications__BasicComponent := self.services -> map service2resourceDemandingSEFF(result);
}

constructor PCM::repository::OperationProvidedRole::OperationProvidedRole(
	providingEntityName: oclstdlib::String,
	providingEntity: PCM::core::entity::InterfaceProvidingRequiringEntity,
	interface: PCM::repository::OperationInterface) {
	id := getId();
	entityName := providingEntityName + ".provides:" + interface.entityName;
	providingEntity_ProvidedRole := providingEntity;
	providedInterface__OperationProvidedRole := interface;
};

constructor PCM::repository::OperationRequiredRole::OperationRequiredRole(
	providingEntityName: oclstdlib::String,
	requiringEntity: PCM::core::entity::InterfaceProvidingRequiringEntity,
	interface: PCM::repository::OperationInterface) {
	id := getId();
	entityName := providingEntityName + ".provides:" + interface.entityName;
	requiringEntity_RequiredRole := requiringEntity;
	requiredInterface__OperationRequiredRole := interface;
	
};

mapping CBS::repository::Interface::interface2OperationInterface(repo: PCM::repository::Repository): PCM::repository::OperationInterface {
	id := getId();
	entityName := self.name;
	repository__Interface := repo;
	
	signatures__OperationInterface := self.signatures -> map signature2operationSignature(result);
	
	parentInterfaces__Interface := Set {}; // note: no inheritance of interfaces in CBS 
	protocols__Interface := Set {}; // note: no information about order of calls modeled in CBS
	requiredCharacterisations := Set {}; // note: no variable characterization modeled in CBS
}

mapping CBS::repository::Signature::signature2operationSignature(interface: PCM::repository::OperationInterface): PCM::repository::OperationSignature {
	id := getId();
	entityName := self.name;
	interface__OperationSignature := interface;
	
	parameters__OperationSignature := self.parameters -> map parameter2parameter(result);
	if(self.returnType.oclIsKindOf(CBS::repository::types::Void)){
		// TODO: is null correct to model "not set"?
		returnType__OperationSignature := null; // note: void not modeled in PCM
	} else {
		returnType__OperationSignature := self.returnType.resolveone(PCM::repository::DataType);
	};
	
	exceptions__Signature := Set {}; // note: no exceptions modeled in CBS
	failureType := Set{}; // note: no failures modeled in CBS
}

mapping CBS::repository::Parameter::parameter2parameter(operation: PCM::repository::OperationSignature): PCM::repository::Parameter {
	parameterName := self.name;
	operationSignature__Parameter := operation;
	
	dataType__Parameter := self.type.resolveone(PCM::repository::DataType);
	
	infrastructureSignature__Parameter := null; // note: no concept of infrastructure in CBS
	eventType__Parameter := null; // note: no events in CBS
	resourceSignature__Parameter := null; // note: no concept of resources in CBS
	modifier__Parameter := PCM::repository::ParameterModifier::none;
}

/////////////////////////////////////////////////
///////////// Behavioral Description ///////////
///////////////////////////////////////////////

mapping CBS::repository::behavioraldescription::Service::service2resourceDemandingSEFF(parentComponent: PCM::repository::BasicComponent): PCM::seff::ResourceDemandingSEFF {
	id := getId();
	seffTypeID := "1";
	basicComponent_ServiceEffectSpecification := parentComponent;
	
	describedService__SEFF := self.implements.resolveone(PCM::repository::Signature);
	
	steps_Behaviour := transformSteps(self.actions -> asSequence(), parentComponent);
	
	abstractLoopAction_ResourceDemandingBehaviour := null;
	abstractBranchTransition_ResourceDemandingBehaviour := null;
	resourceDemandingInternalBehaviours := Set{}; // no internal methods in CBS
}

constructor PCM::seff::StartAction::StartAction(){
	id := getId();
	entityName := "Start Action";
	
	resourceDemandingBehaviour_AbstractAction;
	predecessor_AbstractAction := null; //to be set later
	successor_AbstractAction := null;
	
	infrastructureCall__Action := Set{}; // note: not modeled in CBS
	resourceCall__Action := Set{}; // note: not modeled in CBS
	resourceDemand_Action := Set{}; // note: not modeled in CBS
}

constructor PCM::seff::StopAction::StopAction(){
	id := getId();
	entityName := "Stop Action";
	
	resourceDemandingBehaviour_AbstractAction := null; //TODO
	predecessor_AbstractAction := null; //to be set later
	successor_AbstractAction := null;
	
	infrastructureCall__Action := Set{}; // note: not modeled in CBS
	resourceCall__Action := Set{}; // note: not modeled in CBS
	resourceDemand_Action := Set{}; // note: not modeled in CBS
}

helper transformSteps(steps: Sequence(CBS::repository::behavioraldescription::AbstractAction), component: PCM::core::entity::InterfaceRequiringEntity): Sequence(PCM::seff::AbstractAction) {
	var mappedSteps: Sequence(PCM::seff::AbstractAction) := steps -> map abstractAction2abstractAction(component);
	var startAction := new PCM::seff::StartAction();
	var stopAction := new PCM::seff::StopAction();
	
	var prev : PCM::seff::AbstractAction := startAction;
	mappedSteps -> forEach(step){
		step.predecessor_AbstractAction := prev;
		prev := step;
	};
	
	var after : PCM::seff::AbstractAction := stopAction;
	mappedSteps -> reverse() -> forEach(step){
		step.successor_AbstractAction := after;
		after := step;
	};
	
	return mappedSteps -> reverse() -> append(startAction) -> reverse() -> append(stopAction);
}

abstract mapping CBS::repository::behavioraldescription::AbstractAction::abstractAction2abstractActionAbstract(component: PCM::core::entity::InterfaceRequiringEntity): PCM::seff::AbstractAction {
	id := getId();
	predecessor_AbstractAction := null; // set later
	successor_AbstractAction := null; // set later
	resourceDemandingBehaviour_AbstractAction := null; // TODO: check meaning
}

mapping CBS::repository::behavioraldescription::AbstractAction::abstractAction2abstractAction(component: PCM::core::entity::InterfaceRequiringEntity): PCM::seff::AbstractAction
disjuncts
	CBS::repository::behavioraldescription::InternalAction::internalAction2internalAction,
	CBS::repository::behavioraldescription::ExternalCallAction::externalCallAction2ExternalCallAction,
	CBS::repository::behavioraldescription::BranchAction::branchAction2branchAction,
	CBS::repository::behavioraldescription::LoopAction::loopAction2loopAction
{} 

mapping CBS::repository::behavioraldescription::InternalAction::internalAction2internalAction(component: PCM::core::entity::InterfaceRequiringEntity): PCM::seff::InternalAction
inherits CBS::repository::behavioraldescription::AbstractAction::abstractAction2abstractActionAbstract
when {self.oclIsKindOf(CBS::repository::behavioraldescription::InternalAction)}
{
	entityName := "Default Internal Action";
	infrastructureCall__Action := Set{}; // note: not modeled in CBS
	resourceCall__Action := Set{}; // note: not modeled in CBS
	resourceDemand_Action := Set{}; // note: not modeled in CBS
	internalFailureOccurrenceDescriptions__InternalAction := Set{}; // note: not modeled in CBS
}

mapping CBS::repository::behavioraldescription::ExternalCallAction::externalCallAction2ExternalCallAction(component: PCM::core::entity::InterfaceRequiringEntity): PCM::seff::ExternalCallAction
inherits CBS::repository::behavioraldescription::AbstractAction::abstractAction2abstractActionAbstract
when {self.oclIsKindOf(CBS::repository::behavioraldescription::ExternalCallAction)}
{
	entityName := "Default External Call Action";
	inputVariableUsages__CallAction := Set{}; // note: no parametrization in CBS
	returnVariableUsage__CallReturnAction := Set{}; // note: no parametrization in CBS
	failureTypes_FailureHandlingEntity := Set{}; // note: not modeled in CBS
	
	calledService_ExternalService := self.requiredService.resolveone(PCM::repository::OperationSignature);
	role_ExternalService := 
		component.requiredRoles_InterfaceRequiringEntity
		-> selectByKind(PCM::repository::OperationRequiredRole)
		-> select(r | r.requiredInterface__OperationRequiredRole.signatures__OperationInterface -> includes(calledService_ExternalService))
		-> asSequence()
		-> first();
	retryCount := 1; // note: default value
}

mapping CBS::repository::behavioraldescription::BranchAction::branchAction2branchAction(component: PCM::core::entity::InterfaceRequiringEntity): PCM::seff::BranchAction
inherits CBS::repository::behavioraldescription::AbstractAction::abstractAction2abstractActionAbstract
when {self.oclIsKindOf(CBS::repository::behavioraldescription::BranchAction)}
{
	entityName := "Default Branch Action";
	infrastructureCall__Action := Set{}; // note: not modeled in CBS
	resourceCall__Action := Set{}; // note: not modeled in CBS
	resourceDemand_Action := Set{}; // note: not modeled in CBS
	
	branches_Branch := self.branches -> map branchTransition2guardedBranchTransition(result, component);
}

constructor PCM::core::PCMRandomVariable::PCMRandomVariable(branchCondition: String, transition: PCM::seff::GuardedBranchTransition){
	guardedBranchTransition_PCMRandomVariable := transition;
	specification := branchCondition;
}

constructor STOEX::BoolLiteral::BoolLiteral(){
	value := true;
}

constructor PCM::core::PCMRandomVariable::PCMRandomVariable(loopExpression: String, loopAction: PCM::seff::LoopAction){
	loopAction_PCMRandomVariable := loopAction;
	specification := "true";
}

constructor PCM::seff::ResourceDemandingBehaviour::ResourceDemandingBehaviour(
	branchTransition: PCM::seff::AbstractBranchTransition, 
	loopAction: PCM::seff::AbstractLoopAction, 
	steps: Sequence(CBS::repository::behavioraldescription::AbstractAction),
	component: PCM::core::entity::InterfaceRequiringEntity)
{	
	id := getId();
	abstractBranchTransition_ResourceDemandingBehaviour := branchTransition;
	abstractLoopAction_ResourceDemandingBehaviour := loopAction;
	
	steps_Behaviour := transformSteps(steps, component);
}

mapping CBS::repository::behavioraldescription::BranchTransition::branchTransition2guardedBranchTransition(branchAction: PCM::seff::BranchAction, component: PCM::core::entity::InterfaceRequiringEntity): 
	PCM::seff::GuardedBranchTransition 
{
	id := getId();
	entityName := "Condition: " + self.branchCondition;
	branchAction_AbstractBranchTransition := branchAction;
	branchBehaviour_BranchTransition := new PCM::seff::ResourceDemandingBehaviour(result, null, self.actions -> asSequence(), component);
	
	branchCondition_GuardedBranchTransition := new PCM::core::PCMRandomVariable(self.branchCondition, result);
}

mapping CBS::repository::behavioraldescription::LoopAction::loopAction2loopAction(component: PCM::core::entity::InterfaceRequiringEntity): PCM::seff::LoopAction
inherits CBS::repository::behavioraldescription::AbstractAction::abstractAction2abstractActionAbstract
when {self.oclIsKindOf(CBS::repository::behavioraldescription::LoopAction)}
{
	entityName := "Default Loop Action";
	infrastructureCall__Action := Set{}; // note: not modeled in CBS
	resourceCall__Action := Set{}; // note: not modeled in CBS
	resourceDemand_Action := Set{}; // note: not modeled in CBS
	
	bodyBehaviour_Loop := new PCM::seff::ResourceDemandingBehaviour(null, result, self.bodyActions -> asSequence(), component); 
	
	iterationCount_LoopAction := new PCM::core::PCMRandomVariable("default loop expression", result);
}


/////////////////////////////////////////////////
///////////// Environment //////////////////////
///////////////////////////////////////////////
mapping CBS::environment::Environment::environmentToResourceEnvironment(repo : PCM::repository::Repository):
	PCM::resourceenvironment::ResourceEnvironment {
	
	entityName := self.name;
	resourceContainer_ResourceEnvironment := self.container->collect(container | container->map containerToResourceContainer(result));
	linkingResources__ResourceEnvironment := self.linker->collect(link | link-> map linkerToLinkingResource(result, repo));

}

mapping CBS::environment::Linker::linkerToLinkingResource
		(env : PCM::resourceenvironment::ResourceEnvironment,
		repo : PCM::repository::Repository):
	PCM::resourceenvironment::LinkingResource {
		
	id := getId();
	entityName := self.name;
	resourceEnvironment_LinkingResource := env;	
	connectedResourceContainers_LinkingResource := 	self.links -> collect(link | link.resolveone(PCM::resourceenvironment::ResourceContainer));
	communicationLinkResourceSpecifications_LinkingResource :=
		new PCM::resourceenvironment::CommunicationLinkResourceSpecification(result, repo);
}

// note : no communicationLinkResourceSpecification in CBS
constructor PCM::resourceenvironment::CommunicationLinkResourceSpecification
			::CommunicationLinkResourceSpecification
			(linkingResource : PCM::resourceenvironment::LinkingResource, repo: PCM::repository::Repository) {
	id := getId();
	failureProbability := 0;
	communicationLinkResourceType_CommunicationLinkResourceSpecification := defaultCommunicationResourceType;
	latency_CommunicationLinkResourceSpecification := new PCM::core::PCMRandomVariable(result, true);
	linkingResource_CommunicationLinkResourceSpecification := linkingResource;
	throughput_CommunicationLinkResourceSpecification := new PCM::core::PCMRandomVariable(result, false);
}

// note : no CommunicationLinkResourceType in CBS
constructor PCM::resourcetype::CommunicationLinkResourceType::CommunicationLinkResourceType
	(repo : PCM::resourcetype::ResourceRepository) {
	id := getId();
 	resourceRepository_ResourceType := repo;
}

constructor PCM::resourcetype::ResourceRepository::ResourceRepository() {

}

//note : no RandomVariable in CBS
constructor PCM::core::PCMRandomVariable::PCMRandomVariable(baseType: PCM::resourceenvironment::CommunicationLinkResourceSpecification, isForLatency: Boolean) {
	if (isForLatency){
		communicationLinkResourceSpecification_latency_PCMRandomVariable := baseType;
	} else {
		communicationLinkResourceSpecifcation_throughput_PCMRandomVariable := baseType;
	};
	
	//note : no sepcification in CBS
	specification := "default specification";
}

mapping CBS::environment::Container::containerToResourceContainer (env : PCM::resourceenvironment::ResourceEnvironment):
	PCM::resourceenvironment::ResourceContainer {
	id := getId();
	entityName := self.name;
	resourceEnvironment_ResourceContainer := env;
	parentResourceContainer__ResourceContainer := result;
	activeResourceSpecifications_ResourceContainer := Set{}; // note: no resource specification in CBS
	nestedResourceContainers__ResourceContainer := Set{}; // note: no neseting of resources in CBS
	hddResourceSpecifications := Set{}; // note: no resource specification in CBS
}

/////////////////////////////////////////////////
///////////// Types ////////////////////////////
///////////////////////////////////////////////
abstract mapping CBS::repository::types::Type::type2dataTypeAbstract(repo: PCM::repository::Repository) : PCM::repository::DataType 
{}

mapping CBS::repository::types::Type::type2dataType (repo: PCM::repository::Repository) : PCM::repository::DataType
disjuncts
	CBS::repository::types::SimpleType::simpleType2primitiveDataType,
	CBS::repository::types::CollectionType::collectionType2collectionDataType,
	CBS::repository::types::ComplexType::complexType2compositeDataType
{}

mapping CBS::repository::types::SimpleType::simpleType2primitiveDataType(repo: PCM::repository::Repository) : PCM::repository::PrimitiveDataType inherits CBS::repository::types::Type::type2dataTypeAbstract
when { self.oclIsKindOf(CBS::repository::types::SimpleType) }
{
	var simpleTypeInstance = self.oclAsType(CBS::repository::types::SimpleType);
	repository__DataType := repo;
	switch{
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::String) {
			type := PCM::repository::PrimitiveTypeEnum::STRING;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Int) {
			type := PCM::repository::PrimitiveTypeEnum::INT;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Boolean) {
			type := PCM::repository::PrimitiveTypeEnum::BOOL;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Char) {
			type := PCM::repository::PrimitiveTypeEnum::CHAR;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Date) {
			// note: no direct mapping exists
			type := PCM::repository::PrimitiveTypeEnum::STRING;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Float) {
			// note: no direct mapping exists
			type := PCM::repository::PrimitiveTypeEnum::LONG;
		}
		case (simpleTypeInstance.type = CBS::repository::types::SimpleTypeEnum::Long) {
			type := PCM::repository::PrimitiveTypeEnum::LONG;
		}
	}
}

mapping CBS::repository::types::CollectionType::collectionType2collectionDataType(repo: PCM::repository::Repository) : PCM::repository::CollectionDataType inherits CBS::repository::types::Type::type2dataTypeAbstract
when { self.oclIsKindOf(CBS::repository::types::CollectionType) }
{
	var collectionTypeInstance = self.oclAsType(CBS::repository::types::CollectionType);
	var innerType := collectionTypeInstance.innerType.resolveone(PCM::repository::DataType);
	
	id := getId();
	repository__DataType := repo;
	entityName := collectionTypeInstance.type.toString() + "<" + collectionTypeInstance.innerType.name + ">";
	innerType_CollectionDataType := innerType;
}

mapping CBS::repository::types::ComplexType::complexType2compositeDataType(repo: PCM::repository::Repository) : PCM::repository::CompositeDataType 
when { self.oclIsKindOf(CBS::repository::types::ComplexType) }
{
	var complexTypeInstance = self.oclAsType(CBS::repository::types::ComplexType);
	
	id := getId();
	repository__DataType := repo;
	entityName := complexTypeInstance.name;
	parentType_CompositeDataType := Set{}; // note: no inheritance of complex types in CBS
	innerDeclaration_CompositeDataType := complexTypeInstance.members -> map complexMember2innerDeclaration(result);
}

mapping CBS::repository::types::ComplexMember::complexMember2innerDeclaration(compositeDataType: PCM::repository::CompositeDataType): PCM::repository::InnerDeclaration {
	compositeDataType_InnerDeclaration := compositeDataType;
	entityName := self.name;
	datatype_InnerDeclaration := self.type.resolveone(PCM::repository::DataType);
}


helper getId(): String {
	var res:= idCounter.toString();
	idCounter := idCounter + 1;
	return res;
}
