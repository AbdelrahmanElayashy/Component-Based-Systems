/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.mydsl.CBSStandaloneSetup
import com.google.inject.Injector
import org.eclipse.xtext.resource.XtextResourceSet
import java.io.IOException
import org.eclipse.emf.common.util.URI
import java.nio.file.Paths
import componentbasedsystem.repository.Repository
import componentbasedsystem.repository.Interface
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import componentbasedsystem.repository.Signature
import componentbasedsystem.repository.Parameter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CBSGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		  
   		 for(e: resource.allContents.toIterable.filter(Repository)) {
       		 fsa.generateFile("repository/Helper.java", e.compile)
   		 }
   		 
   		 for(e: resource.allContents.toIterable.filter(Interface)) {
       		 fsa.generateFile(
            	"repository/I" + e.fullyQualifiedName.toString("/") + ".java",
            	e.compile)
   		 }
		
//		val Injector injector = new CBSStandaloneSetup().createInjectorAndDoEMFRegistration();
//		
//		val XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet);
//		
//		EcoreUtil.resolveAll(resource);
//		
//		var String filename = Paths.get(resource.URI.path).getFileName().toString().replaceFirst("[.][^.]+$", "");
//		fsa.generateFile(filename+ ".xmi", "")
//		val URI outputURI = fsa.getURI(filename+ ".xmi")
//		
//		val Resource xmiResource = resourceSet.createResource(outputURI);
//		xmiResource.getContents().add(resource.getContents().get(0));
//		try {
//			xmiResource.save(null);
//		} catch (IOException e) {
//			e.printStackTrace();	
//		}


	}
	
  def compile(Repository e)'''
     package repository;
     
     public class Helper {
     }
  '''
  
  
    def compile(Interface e)'''
    
    package repository;
   
     public interface I«e.name» {
     	  «FOR f:e.signatures»
        «f.compile»
     	   «ENDFOR»
     }
  '''
  
    def compile(Signature e)'''
     public «e.returnType.name» «e.name»(«FOR f:e.parameters SEPARATOR ','»«f.compile»«ENDFOR»);
     
  '''
  
    def compile(Parameter e)'''
     	«e.type.name» «e.name» 
  '''
}