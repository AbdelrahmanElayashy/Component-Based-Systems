/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import componentbasedsystem.repository.AtomicComponent;
import componentbasedsystem.repository.Interface;
import componentbasedsystem.repository.Parameter;
import componentbasedsystem.repository.Repository;
import componentbasedsystem.repository.Signature;
import componentbasedsystem.repository.types.SimpleType;
import componentbasedsystem.repository.types.Type;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CBSToJavaGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Repository repository = ((Repository[])Conversions.unwrapArray((Iterables.<Repository>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Repository.class)), Repository.class))[0];
    String repositoryName = "repository";
    fsa.generateFile((repositoryName + "/Helper.java"), this.compile(repository, repositoryName));
    EList<Interface> _interfaces = repository.getInterfaces();
    for (final Interface i : _interfaces) {
      String _name = i.getName();
      String _plus = ((repositoryName + "/I") + _name);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.compile(i, repositoryName));
    }
    EList<AtomicComponent> _components = repository.getComponents();
    for (final AtomicComponent atomicComponent : _components) {
      String _name_1 = atomicComponent.getName();
      String _plus_2 = ((repositoryName + "/") + _name_1);
      String _plus_3 = (_plus_2 + "/");
      String _name_2 = atomicComponent.getName();
      String _plus_4 = (_plus_3 + _name_2);
      String _plus_5 = (_plus_4 + "Impl.java");
      fsa.generateFile(_plus_5, this.compile(atomicComponent, repositoryName));
    }
  }

  public CharSequence compile(final Repository repository, final String repositoryName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(repositoryName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("public class Helper {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void assertNotNull(Object component){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assert component != null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compile(final Interface i, final String repositoryName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(repositoryName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface I");
    String _name = i.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Signature> _signatures = i.getSignatures();
      for(final Signature signature : _signatures) {
        _builder.append("\t");
        CharSequence _compile = this.compile(signature);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    return _builder;
  }

  public CharSequence compile(final AtomicComponent atomicComponent, final String repositoryName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(repositoryName);
    _builder.append(".");
    String _name = atomicComponent.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Interface> _requires = atomicComponent.getRequires();
      for(final Interface requiredInterface : _requires) {
        _builder.append("import repository.I");
        String _name_1 = requiredInterface.getName();
        _builder.append(_name_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import repository.Helper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name_2 = atomicComponent.getName();
    _builder.append(_name_2);
    _builder.append("Impl ");
    {
      EList<Interface> _provides = atomicComponent.getProvides();
      boolean _hasElements = false;
      for(final Interface providedInterface : _provides) {
        if (!_hasElements) {
          _hasElements = true;
          _builder.append("implements ");
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append("I");
        String _name_3 = providedInterface.getName();
        _builder.append(_name_3);
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Interface> _requires_1 = atomicComponent.getRequires();
      for(final Interface requiredInterface_1 : _requires_1) {
        _builder.append("\t");
        _builder.append("I");
        String _name_4 = requiredInterface_1.getName();
        _builder.append(_name_4, "\t");
        _builder.append(" i");
        String _name_5 = requiredInterface_1.getName();
        _builder.append(_name_5, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Interface> _requires_2 = atomicComponent.getRequires();
      for(final Interface requiredInterface_2 : _requires_2) {
        _builder.append("\t");
        _builder.append("public void setI");
        String _name_6 = requiredInterface_2.getName();
        _builder.append(_name_6, "\t");
        _builder.append("(I");
        String _name_7 = requiredInterface_2.getName();
        _builder.append(_name_7, "\t");
        _builder.append(" i");
        String _name_8 = requiredInterface_2.getName();
        _builder.append(_name_8, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("Helper.assertNotNull(this.i");
        String _name_9 = requiredInterface_2.getName();
        _builder.append(_name_9, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.i");
        String _name_10 = requiredInterface_2.getName();
        _builder.append(_name_10, "\t\t");
        _builder.append(" = i");
        String _name_11 = requiredInterface_2.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Interface> _provides_1 = atomicComponent.getProvides();
      for(final Interface providedInterface_1 : _provides_1) {
        {
          EList<Signature> _signatures = providedInterface_1.getSignatures();
          for(final Signature method : _signatures) {
            _builder.append("\t");
            _builder.append("//Implementing ");
            String _name_12 = method.getName();
            _builder.append(_name_12, "\t");
            _builder.append(" from interface I");
            String _name_13 = providedInterface_1.getName();
            _builder.append(_name_13, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public ");
            CharSequence _compile = this.compile(method.getReturnType());
            _builder.append(_compile, "\t");
            _builder.append(" ");
            String _name_14 = method.getName();
            _builder.append(_name_14, "\t");
            _builder.append("(");
            {
              EList<Parameter> _parameters = method.getParameters();
              boolean _hasElements_1 = false;
              for(final Parameter parameter : _parameters) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(", ", "\t");
                }
                CharSequence _compile_1 = this.compile(parameter);
                _builder.append(_compile_1, "\t");
              }
            }
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            {
              EList<Interface> _requires_3 = atomicComponent.getRequires();
              for(final Interface requiredInterface_3 : _requires_3) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("Helper.assertNotNull(this.i");
                String _name_15 = requiredInterface_3.getName();
                _builder.append(_name_15, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("// TODO: insert code here");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compile(final Signature signature) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    String _name = signature.getReturnType().getName();
    _builder.append(_name);
    _builder.append(" ");
    String _name_1 = signature.getName();
    _builder.append(_name_1);
    _builder.append("(");
    {
      EList<Parameter> _parameters = signature.getParameters();
      boolean _hasElements = false;
      for(final Parameter parameter : _parameters) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compile = this.compile(parameter);
        _builder.append(_compile);
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence compile(final Parameter parameter) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(parameter.getType());
    _builder.append(_compile);
    _builder.append(" ");
    String _name = parameter.getName();
    _builder.append(_name);
    return _builder;
  }

  public CharSequence compile(final Type type) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((type instanceof componentbasedsystem.repository.types.Void)) {
        _builder.append("void");
      } else {
        if ((type instanceof SimpleType)) {
          String _lowerCase = ((SimpleType)type).getType().getName().toLowerCase();
          _builder.append(_lowerCase);
        } else {
          _builder.append("notSupportedType");
        }
      }
    }
    return _builder;
  }
}
