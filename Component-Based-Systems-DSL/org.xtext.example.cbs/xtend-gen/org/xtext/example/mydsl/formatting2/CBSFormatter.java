/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import componentbasedsystem.ComponentBasedSystemContainer;
import componentbasedsystem.allocation.Allocation;
import componentbasedsystem.assembly.Assembly;
import componentbasedsystem.assembly.AssemblyConnector;
import componentbasedsystem.assembly.AssemblyContext;
import componentbasedsystem.assembly.ProvidedDelegationConnector;
import componentbasedsystem.assembly.RequiredDelegationConnector;
import componentbasedsystem.environment.Environment;
import componentbasedsystem.repository.Repository;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.CBSGrammarAccess;

@SuppressWarnings("all")
public class CBSFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CBSGrammarAccess _cBSGrammarAccess;
  
  protected void _format(final ComponentBasedSystemContainer componentBasedSystemContainer, @Extension final IFormattableDocument document) {
    document.<Repository>format(componentBasedSystemContainer.getRepository());
    EList<Assembly> _assemblies = componentBasedSystemContainer.getAssemblies();
    for (final Assembly assembly : _assemblies) {
      document.<Assembly>format(assembly);
    }
    EList<Environment> _environments = componentBasedSystemContainer.getEnvironments();
    for (final Environment environment : _environments) {
      document.<Environment>format(environment);
    }
    EList<componentbasedsystem.allocation.System> _systems = componentBasedSystemContainer.getSystems();
    for (final componentbasedsystem.allocation.System system : _systems) {
      document.<componentbasedsystem.allocation.System>format(system);
    }
  }
  
  protected void _format(final componentbasedsystem.allocation.System system, @Extension final IFormattableDocument document) {
    EList<AssemblyContext> _childContexts = system.getChildContexts();
    for (final AssemblyContext assemblyContext : _childContexts) {
      document.<AssemblyContext>format(assemblyContext);
    }
    EList<AssemblyConnector> _assemblyConnectors = system.getAssemblyConnectors();
    for (final AssemblyConnector assemblyConnector : _assemblyConnectors) {
      document.<AssemblyConnector>format(assemblyConnector);
    }
    EList<RequiredDelegationConnector> _requiredDelegationConnectors = system.getRequiredDelegationConnectors();
    for (final RequiredDelegationConnector requiredDelegationConnector : _requiredDelegationConnectors) {
      document.<RequiredDelegationConnector>format(requiredDelegationConnector);
    }
    EList<ProvidedDelegationConnector> _providedDelegationConnectors = system.getProvidedDelegationConnectors();
    for (final ProvidedDelegationConnector providedDelegationConnector : _providedDelegationConnectors) {
      document.<ProvidedDelegationConnector>format(providedDelegationConnector);
    }
    document.<Allocation>format(system.getAllocation());
  }
  
  public void format(final Object system, final IFormattableDocument document) {
    if (system instanceof XtextResource) {
      _format((XtextResource)system, document);
      return;
    } else if (system instanceof componentbasedsystem.allocation.System) {
      _format((componentbasedsystem.allocation.System)system, document);
      return;
    } else if (system instanceof ComponentBasedSystemContainer) {
      _format((ComponentBasedSystemContainer)system, document);
      return;
    } else if (system instanceof EObject) {
      _format((EObject)system, document);
      return;
    } else if (system == null) {
      _format((Void)null, document);
      return;
    } else if (system != null) {
      _format(system, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(system, document).toString());
    }
  }
}
