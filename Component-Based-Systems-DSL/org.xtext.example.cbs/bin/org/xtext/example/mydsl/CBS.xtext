grammar org.xtext.example.mydsl.CBS with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore" as componentbasedsystem
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//assembly" as assembly
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//repository" as repository
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//repository/behavioraldescription" as behavioraldescription
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//repository/types" as types
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//environment" as environment
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//allocation" as allocation


ComponentBasedSystemContainer returns componentbasedsystem::ComponentBasedSystemContainer:
	(repository = Repository)?
	&
	(assembly = Assembly)?
	&
	(environment = Environment)?
	&
	(system = System)?
;

// region allocation

System returns allocation::System:
	'System'
	name=EString
	'{'
		('childContexts' '{' childContexts+=AssemblyContext ( "," childContexts+=AssemblyContext)* '}' )?
		('assemblyConnectors' '{' assemblyConnectors+=AssemblyConnector ( "," assemblyConnectors+=AssemblyConnector)* '}' )?
		('requiredDelegationConnectors' '{' requiredDelegationConnectors+=RequiredDelegationConnector ( "," requiredDelegationConnectors+=RequiredDelegationConnector)* '}' )?
		('providedDelegationConnectors' '{' providedDelegationConnectors+=ProvidedDelegationConnector ( "," providedDelegationConnectors+=ProvidedDelegationConnector)* '}' )?
		'allocation' 	'{' allocation=Allocation 	'}'
	'}';
	
Allocation returns allocation::Allocation:
	'env' environment=[environment::Environment|EString]
	('allocationContexts' '{' allocationContexts+=AllocationContext ( "," allocationContexts+=AllocationContext)* '}' )?;

AllocationContext returns allocation::AllocationContext:
	'{'
		'container' container=[environment::Container|EString]
		'allocates' allocates=[assembly::AssemblyContext|EString]
	'}';

// region environment

Environment returns environment::Environment:
	{environment::Environment}
	'Environment'
	name=EString
	'{'
		('containers' '{' container+=Container ( "," container+=Container)* '}' )?
		('linkers' '{' linker+=Linker ( "," linker+=Linker)* '}' )?
	'}';

Container returns environment::Container:
	{environment::Container}
	name=EString;

Linker returns environment::Linker:
	  links+=[environment::Container|EString] ( "<->" links+=[environment::Container|EString])* ;
	

// region assembly

Assembly returns assembly::Assembly:
	{assembly::Assembly}
	'assembly'
	name=EString
	'{'
		( compositeComponents+=CompositeComponent ( "," compositeComponents+=CompositeComponent)* )?
	'}';

Component returns repository::Component:
	AtomicComponent | CompositeComponent;
	
CompositeComponent returns assembly::CompositeComponent:
	{assembly::CompositeComponent}
	'CompositeComponent'
	name=EString
	'{'
		('requires' '{' requires+=[repository::Interface|EString] ( "," requires+=[repository::Interface|EString])* '}' )?
		('provides' '{' provides+=[repository::Interface|EString] ( "," provides+=[repository::Interface|EString])* '}' )?
		('childContexts' '{' childContexts+=AssemblyContext ( "," childContexts+=AssemblyContext)* '}' )?
		('assemblyConnectors' '{' assemblyConnectors+=AssemblyConnector ( "," assemblyConnectors+=AssemblyConnector)* '}' )?
		('requiredDelegationConnectors' '{' requiredDelegationConnectors+=RequiredDelegationConnector ( "," requiredDelegationConnectors+=RequiredDelegationConnector)* '}' )?
		('providedDelegationConnectors' '{' providedDelegationConnectors+=ProvidedDelegationConnector ( "," providedDelegationConnectors+=ProvidedDelegationConnector)* '}' )?
	'}';

AssemblyContext returns assembly::AssemblyContext:
	name=EString
	'{'
		'instance' instantiates=[repository::Component|EString]
		('provide' '(' providedRoles+=ProvidedRole ( "," providedRoles+=ProvidedRole)* ')' )?
		('require' '(' requiredRoles+=RequiredRole ( "," requiredRoles+=RequiredRole)* ')' )?
	'}';

AssemblyConnector returns assembly::AssemblyConnector:
	'('
	    requiringRole=[assembly::RequiredRole|EString]
	',' 
		providingRole=[assembly::ProvidedRole|EString]
	')';

RequiredDelegationConnector returns assembly::RequiredDelegationConnector:
	requiringRole=[assembly::RequiredRole|EString];
	

ProvidedDelegationConnector returns assembly::ProvidedDelegationConnector:
	 providingRole=[assembly::ProvidedRole|EString];

ProvidedRole returns assembly::ProvidedRole:
	name=EString
	interface=[repository::Interface|EString];
	

RequiredRole returns assembly::RequiredRole:
	name=EString
	interface=[repository::Interface|EString];
	

// region repository
/*
 * TODO:
 * - how to reference simple/collection types?
 * - no strict order inside atomic component?
 * - allow empty {}?
 * - remove nesting of repository
 * - correct usage of actions?
 * 
 * TODO general
 * - document model changes
 */ 

Repository returns repository::Repository:
	{repository::Repository}
	'repository'
	'{'	
		('interfaces' '{' interfaces+=Interface ("," interfaces+=Interface)* '}' )?
		('components' '{' components+=AtomicComponent ("," components+=AtomicComponent)* '}' )?
		('types' '{' types+=Type ("," types+=Type)* '}' )?
	'}';

Interface returns repository::Interface:
	{repository::Interface}
	'interface'
	name=EString
	'{'
		(signatures+=Signature ( "," signatures+=Signature)*)?
	'}';

AtomicComponent returns repository::AtomicComponent:
	{repository::AtomicComponent}
	'atomicComponent'
	name=EString
	'{'
		('provides' '{' provides+=[repository::Interface|EString] ( "," provides+=[repository::Interface|EString])* '}' )?
		('requires' '{' requires+=[repository::Interface|EString] ( "," requires+=[repository::Interface|EString])* '}' )?
		('services' '{' services+=Service ( "," services+=Service)* '}' )?
	'}';

Signature returns repository::Signature:
	returnType=[types::Type|EString]
	name=EString 
	'('( parameters+=Parameter ( "," parameters+=Parameter)* )? ')';

Parameter returns repository::Parameter:
	type=[types::ParameterType|EString] 
	name=EString;

// region types

Type returns types::Type:
	Void | ParameterType;

ParameterType returns types::ParameterType:
	SimpleType | ComplexType | CollectionType;

SimpleType returns types::SimpleType:
	'type' name=EString type=SimpleTypeEnum ;

ComplexType returns types::ComplexType:
	{types::ComplexType}
	'type'
	name=EString
	'{'
		(members+=ComplexMember ( "," members+=ComplexMember)* )?
	'}';

enum SimpleTypeEnum returns types::SimpleTypeEnum:
	String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Char = 'Char' | Date = 'Date' | Double = 'Double' | Float = 'Float' | Long = 'Long';

ComplexMember returns types::ComplexMember:
	name=EString ':' type=[types::ParameterType|EString];

Void returns types::Void:
	{types::Void}
	name=EString;
	
CollectionType returns types::CollectionType:
	type=CollectionTypeEnum '<' innerType=[types::ParameterType|EString] '>' name=EString;

enum CollectionTypeEnum returns types::CollectionTypeEnum:
	List = 'List' | Map = 'Map';
	
// region behavioral description

AbstractAction returns behavioraldescription::AbstractAction:
	InternalAction | ExternalCallAction | BranchAction | LoopAction;

Service returns behavioraldescription::Service:
	'service' implements=[repository::Signature|EString]
	'{'
		actions+=AbstractAction ( ";" actions+=AbstractAction)*
	'}';

InternalAction returns behavioraldescription::InternalAction:
	{behavioraldescription::InternalAction}
	'internalCall';

ExternalCallAction returns behavioraldescription::ExternalCallAction:
	'externalCall' requiredService=[repository::Signature|EString];

BranchAction returns behavioraldescription::BranchAction:
	'branch'
	'{'
		branches+=BranchTransition ( "," branches+=BranchTransition)*
	'}';
	
BranchTransition returns behavioraldescription::BranchTransition:
	branchCondition=EString '?' 
	'{' 
		actions+=AbstractAction ( ";" actions+=AbstractAction)*
	'}';

LoopAction returns behavioraldescription::LoopAction:
	{behavioraldescription::LoopAction}
	'loop'
	'{'
		bodyActions+=AbstractAction ( ";" bodyActions+=AbstractAction)*
	'}';
	
// region helper

EString returns ecore::EString:
	STRING | ID;