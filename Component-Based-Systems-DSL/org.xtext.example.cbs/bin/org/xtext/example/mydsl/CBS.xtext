// automatically generated by Xtext
grammar org.xtext.example.mydsl.CBS with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//assembly" as assembly
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//repository" as repository
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//repository/behavioraldescription" as behavioraldescription
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//repository/types" as types
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//environment" as environment
import "platform:/resource/Component-Based-Systems/model/ComponentBasedSystems.ecore#//allocation" as allocation


System returns allocation::System:
	'System'
	name=EString
	'{'
		('childContexts' '{' childContexts+=AssemblyContext ( "," childContexts+=AssemblyContext)* '}' )?
		('assemblyConnectors' '{' assemblyConnectors+=AssemblyConnector ( "," assemblyConnectors+=AssemblyConnector)* '}' )?
		('requiredDelegationConnectors' '{' requiredDelegationConnectors+=RequiredDelegationConnector ( "," requiredDelegationConnectors+=RequiredDelegationConnector)* '}' )?
		('providedDelegationConnectors' '{' providedDelegationConnectors+=ProvidedDelegationConnector ( "," providedDelegationConnectors+=ProvidedDelegationConnector)* '}' )?
		'allocation' allocation=Allocation
	'}';


Component returns repository::Component:
	AtomicComponent;

Type returns types::Type:
	Void | SimpleType | ComplexType;

ParameterType returns types::ParameterType:
	SimpleType | ComplexType;


AbstractAction returns behavioraldescription::AbstractAction:
	InternalAction | ExternalCallAction | BranchAction | LoopAction;




AssemblyContext returns assembly::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		'instantiates' instantiates=[repository::Component|EString]
		('providedRoles' '{' providedRoles+=ProvidedRole ( "," providedRoles+=ProvidedRole)* '}' )?
		('requiredRoles' '{' requiredRoles+=RequiredRole ( "," requiredRoles+=RequiredRole)* '}' )?
	'}';

AssemblyConnector returns assembly::AssemblyConnector:
	'AssemblyConnector'
	name=EString
	'{'
		'requiringRole' requiringRole=[assembly::RequiredRole|EString]
		'providingRole' providingRole=[assembly::ProvidedRole|EString]
	'}';

RequiredDelegationConnector returns assembly::RequiredDelegationConnector:
	'RequiredDelegationConnector'
	name=EString
	'{'
		'requiringRole' requiringRole=[assembly::RequiredRole|EString]
	'}';

ProvidedDelegationConnector returns assembly::ProvidedDelegationConnector:
	'ProvidedDelegationConnector'
	name=EString
	'{'
		'providingRole' providingRole=[assembly::ProvidedRole|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

Allocation returns allocation::Allocation:
	'Allocation'
	'{'
		'environment' environment=[environment::Environment|EString]
		('allocationContexts' '{' allocationContexts+=AllocationContext ( "," allocationContexts+=AllocationContext)* '}' )?
	'}';

ProvidedRole returns assembly::ProvidedRole:
	'ProvidedRole'
	name=EString
	'{'
		'interface' interface=[repository::Interface|EString]
	'}';

RequiredRole returns assembly::RequiredRole:
	'RequiredRole'
	name=EString
	'{'
		'interface' interface=[repository::Interface|EString]
	'}';

Interface returns repository::Interface:
	{repository::Interface}
	'Interface'
	name=EString
	'{'
		('signatures' '{' signatures+=Signature ( "," signatures+=Signature)* '}' )?
	'}';

AtomicComponent returns repository::AtomicComponent:
	{repository::AtomicComponent}
	'AtomicComponent'
	name=EString
	'{'
		('requires' '(' requires+=[repository::Interface|EString] ( "," requires+=[repository::Interface|EString])* ')' )?
		('provides' '(' provides+=[repository::Interface|EString] ( "," provides+=[repository::Interface|EString])* ')' )?
		('services' '{' services+=Service ( "," services+=Service)* '}' )?
	'}';

Signature returns repository::Signature:
	'Signature'
	name=EString
	'{'
		'returnType' returnType=[types::Type|EString]
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Parameter returns repository::Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=[types::ParameterType|EString]
	'}';

SimpleType returns types::SimpleType:
	'SimpleType'
	'{'
		'type' type=SimpleTypeEnum
	'}';

ComplexType returns types::ComplexType:
	{types::ComplexType}
	'ComplexType'
	'{'
		('members' '{' members+=ComplexMember ( "," members+=ComplexMember)* '}' )?
	'}';

enum SimpleTypeEnum returns types::SimpleTypeEnum:
				String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Char = 'Char' | Date = 'Date' | Double = 'Double' | Float = 'Float' | Long = 'Long';

ComplexMember returns types::ComplexMember:
	'ComplexMember'
	name=EString
	'{'
		'type' type=[types::ParameterType|EString]
	'}';

Void returns types::Void:
	{types::Void}
	'Void'
	;

Service returns behavioraldescription::Service:
	'Service'
	'{'
		'implements' implements=[repository::Signature|EString]
		'actions' '{' actions+=AbstractAction ( "," actions+=AbstractAction)* '}' 
	'}';

InternalAction returns behavioraldescription::InternalAction:
	{behavioraldescription::InternalAction}
	'InternalAction'
	;

ExternalCallAction returns behavioraldescription::ExternalCallAction:
	'ExternalCallAction'
	'{'
		'requiredService' requiredService=[repository::Signature|EString]
	'}';

BranchAction returns behavioraldescription::BranchAction:
	'BranchAction'
	'{'
		'branches' '{' branches+=BranchTransition ( "," branches+=BranchTransition)* '}' 
	'}';

LoopAction returns behavioraldescription::LoopAction:
	{behavioraldescription::LoopAction}
	'LoopAction'
	'{'
		('bodyActions' '{' bodyActions+=AbstractAction ( "," bodyActions+=AbstractAction)* '}' )?
	'}';

BranchTransition returns behavioraldescription::BranchTransition:
	'BranchTransition'
	'{'
		('branchCondition' branchCondition=EString)?
		'action' action=AbstractAction
	'}';

AllocationContext returns allocation::AllocationContext:
	'AllocationContext'
	'{'
		'container' container=[environment::Container|EString]
		'allocates' allocates=[assembly::AssemblyContext|EString]
	'}';

Environment returns environment::Environment:
	{environment::Environment}
	'Environment'
	name=EString
	'{'
		('container' '{' container+=Container ( "," container+=Container)* '}' )?
		('linker' '{' linker+=Linker ( "," linker+=Linker)* '}' )?
	'}';

Container returns environment::Container:
	{environment::Container}
	'Container'
	name=EString;

Linker returns environment::Linker:
	'Linker'
	name=EString
	'{'
		'links' '(' links+=[environment::Container|EString] ( "," links+=[environment::Container|EString])* ')' 
	'}';