repository {
	interfaces {
		interface HTTP {
			int HTTPUpload(),
			int HTTPDownload()
		},
		interface Sound {
			int watermark()
			
		},
		interface MediaStore {
			int download(int param3, int param2, int param1),
			int upload()
		},
		interface AudioDB {
			int queryDB(int param1),
			int addFile()
		}
	}
	
	components {
		atomicComponent WebGUI {
			provides {
				HTTP
			}
			requires {
				MediaStore
			}
			services {
				service "HTTP.HTTPUpload" {
					internalCall;
					externalCall "MediaStore.download"
				},
				service "HTTP.HTTPDownload" {
					loop {
						internalCall;
						branch {
							"b<=a" ? { internalCall },
							"b>a" ? { internalCall }
						}
					}
				}
			}
		},
		atomicComponent MediaManager {
			provides {
				MediaStore
			}
			requires {
				Sound
			}
			services {
				service "MediaStore.download" {
					internalCall
				},
				service "MediaStore.upload" {
					internalCall
				}
			}
		},
		atomicComponent DBCache {
			provides {
				AudioDB
			}
			requires {
				AudioDB
			}
			services {
				service "AudioDB.queryDB" {
					internalCall
				},
				service "AudioDB.addFile" {
					internalCall
				}
			}
				
		},
		atomicComponent DigitalWaterMarking {
			provides {
				Sound
			}
			services {
			service "Sound.watermark" {
					internalCall
				}
			}
		},
		atomicComponent PoolingAudioDB {
			provides {
				AudioDB
			}
			services {
				service "AudioDB.addFile" {
					internalCall
				},
				service "AudioDB.queryDB" {
					internalCall
				}
			}
		}
	}
	types {
		type complexTypeA {
			memberA: complexTypeA
		},
		type int Int,
		Void
	}
}

assembly MediaStoreAssembly{
	CompositeComponent MediaStoreComposite{
		requires {
			AudioDB
		}
		provides {
			MediaStore
		}
		
		childContexts {
			MediaManagerContext {
				instance MediaManager
				provide(IMediaStore MediaStore)
				require(ISound Sound, IAudioDB AudioDB)
			},
			DigitalWaterMarkingContext {
				instance DigitalWaterMarking
				provide(ISound Sound)
			},
			DBCachContext {
				instance DBCache
				provide(IAudioDB AudioDB)
				require(IAudioDB AudioDB)
			}
		
		}
		
		assemblyConnectors {
			("MediaManagerContext.IAudioDB", "DBCachContext.IAudioDB"),
			("MediaManagerContext.ISound", "DigitalWaterMarkingContext.ISound")
		}
		
		requiredDelegationConnectors {
			"DBCachContext.IAudioDB"
		}
		
		providedDelegationConnectors {
			"MediaManagerContext.IMediaStore"
		}
	}

}

Environment mediaFileEnv{
	containers {
		ApplicationServer, 
		DatabaseServer
	}
	linkers {
		ApplicationServer <-> DatabaseServer
	}
}

System mediaFileSystem{
	childContexts {
		WebGUIContext {
			instance WebGUI
			provide (IHTTP HTTP)
			require (IMediaStore MediaStore)
		},
		PoolingAudioDBContext {
			instance PoolingAudioDB
			provide (IAudioDB AudioDB)
		},
		MediaStoreComposite {
			instance "MediaStoreAssembly.MediaStoreComposite"
			provide (IMediaStore MediaStore)
			require (IAudioDB AudioDB)
		}
	}
	
	assemblyConnectors {
		("WebGUIContext.IMediaStore","MediaStoreComposite.IMediaStore"),
		("MediaStoreComposite.IAudioDB","PoolingAudioDBContext.IAudioDB")
	}
	
	providedDelegationConnectors{
		"WebGUIContext.IHTTP"
	}
	
	allocation {
		env mediaFileEnv
		allocationContexts {
			{
				container "mediaFileEnv.ApplicationServer"
				allocates "mediaFileSystem.MediaStoreComposite"
			},
			{
				container "mediaFileEnv.ApplicationServer"
				allocates "mediaFileSystem.WebGUIContext"
			},
			{
				container "mediaFileEnv.DatabaseServer"
				allocates "mediaFileSystem.PoolingAudioDBContext"
			}
		}
	}
}