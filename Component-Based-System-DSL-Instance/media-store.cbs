repository {
	
	repository {
		interfaces {
			interface HTTP {
				complexTypeA HTTPUpload(),
				complexTypeA HTTPDownload()
			},
			interface Sound {
				complexTypeA watermark()
			},
			interface MediaStore {
				complexTypeA download(complexTypeA param1),
				complexTypeA upload()
			},
			interface AudioDB {
				complexTypeA queryDB(),
				complexTypeA addFile()
			}
		}
		
		components {
			atomicComponent WebGUI {
				provides {
					HTTP
				}
				requires {
					MediaStore
				}
				services {
					service "HTTP.HTTPUpload" {
						internalCall;
						externalCall "MediaStore.download"
					},
					service "HTTP.HTTPDownload" {
						loop {
							internalCall;
							branch {
								"b<=a" ? { internalCall },
								"b>a" ? { internalCall }
							}
						}
					}
				}
			},
			atomicComponent MediaManager {
				provides {
					MediaStore
				}
				requires {
					Sound
				}
				services {
					service "MediaStore.download" {
						internalCall
					},
					service "MediaStore.upload" {
						internalCall
					}
				}
			}
			,
			atomicComponent DBCache {
				provides {
					AudioDB
				}
				requires {
					AudioDB
				}
				services {
					service "AudioDB.queryDB" {
						internalCall
					},
					service "AudioDB.addFile" {
						internalCall
					}
				}
					
			}
			,
			atomicComponent DigitalWaterMarking {
				provides {
					Sound
				}
				services {
				service "Sound.watermark" {
						internalCall
					}
				}
			}
			,
			atomicComponent PoolingAudioDB {
				provides {
					AudioDB
				}
				services {
					service "AudioDB.addFile" {
						internalCall
					},
					service "AudioDB.queryDB" {
						internalCall
					}
				}
			}
		}
		
		types {
			type complexTypeA {
				memberA: complexTypeA
			},
			type Int
		}
	}
}


assemblies {
	// note : how to define assemblyContext for atomic component here!
	assembly MediaStoreAssembly{
		
		
		CompositeComponent MediaStoreComposite{
			requires {
				AudioDB
			}
			provides {
				MediaStore
			}
			
			childContexts {
				MediaManagerContext {
					instance MediaManager
					provide(IMediaStore MediaStore)
					require(ISound Sound)
				},
				DigitalWaterMarkingContext {
					instance DigitalWaterMarking
					provide(ISound Sound)
				},
				DBCachContext {
					instance DBCache
					provide(IAudioDB AudioDB)
					require(IAudioDB AudioDB)
				}
			
			}
			
			requiredDelegationConnectors {
				"DBCachContext.IAudioDB"
			}
			
			providedDelegationConnectors {
				"MediaManagerContext.IMediaStore"
			}
		}

	}
}

environments {
	
	Environment mediaFileEnv{
		containers= {
			ApplicationServer, 
			DatabaseServer
		}
		linkers= {
			link(ApplicationServer, DatabaseServer)
		}
	}
	
	
}

systems{
	
	System mediaFile{
		// should we define atomic component context here!
		childContexts= {
			WebGUIContext {
				instance WebGUI
				provide (IHTTP HTTP)
				require (IMediaStore MediaStore)
			},
			PoolingAudioDBContext {
				instance PoolingAudioDB
				provide (IAudioDB AudioDB)
			}
		}
		
		providedDelegationConnectors={
			"WebGUIContext.IHTTP"
		}
		
		allocation= {
			env= mediaFileEnv
			allocationContexts= {
				{
					container "mediaFileEnv.ApplicationServer"
					allocates "MediaStoreAssembly.MediaStoreComposite.DBCachContext"
				},
			    {
					container "mediaFileEnv.ApplicationServer"
					allocates "MediaStoreAssembly.MediaStoreComposite.DigitalWaterMarkingContext"
				},
				{
					container "mediaFileEnv.ApplicationServer"
					allocates "MediaStoreAssembly.MediaStoreComposite.MediaManagerContext"
				},
				{
					container "mediaFileEnv.ApplicationServer"
					allocates "mediaFile.WebGUIContext"
				},
				{
					container "mediaFileEnv.DatabaseServer"
					allocates "mediaFile.PoolingAudioDBContext"
				}
			}
		}
	}
}